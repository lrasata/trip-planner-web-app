name: Trip-Planner-CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      database:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: tripdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Print GitHub OIDC token
        run: echo $ACTIONS_ID_TOKEN_REQUEST

      - name: Configure AWS credentials (OIDC)
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::387836084035:role/githubTripWebPlannerApp
          aws-region: eu-central-1
          output-env-credentials: true

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üßê Type check
        run: npm run type-check

      - name: üõ† Build
        run: npm run build

      - name: ‚ñ∂ Start backend container with AWS credentials
        run: |
          docker run -d \
            --name backend \
            -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/tripdb \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
            -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            -e ALLOWED_ORIGINS=http://localhost:5173 \
            -e COOKIE_SECURE_ATTRIBUTE=False \
            -e COOKIE_SAME_SITE=Lax \
            -e SUPER_ADMIN_FULLNAME=admin \
            -e SUPER_ADMIN_EMAIL=admin@admin.com \
            -e SUPER_ADMIN_PASSWORD=${{ secrets.SUPER_ADMIN_PASSWORD }} \
            -e ENVIRONMENT=production \
            -e AWS_REGION=eu-central-1 \
            -e DYNAMODB_TABLE_NAME=staging-files-metadata \
            -e S3_BUCKET_NAME=staging-trip-planner-app-media-uploads-bucket \
            -e AWS_ACCESS_KEY_ID=${{ steps.configure-aws.outputs.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ steps.configure-aws.outputs.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_SESSION_TOKEN=${{ steps.configure-aws.outputs.AWS_SESSION_TOKEN }} \
            lrasata/trip-planner-backend-app:1.1.0-rc2
        env:
          POSTGRES_HOST: localhost

      - name: ‚ñ∂ Start frontend in background
        run: npm run dev &
        env:
          NODE_ENV: development
          VITE_API_URL: http://localhost:8080
          VITE_API_CITIES_GEO_DB_URL: https://glggj50z83.execute-api.eu-central-1.amazonaws.com/prod/locations

      - name: ‚è± Wait until frontend is ready
        run: npx wait-on http://localhost:5173

      - name: Check and wait until super admin can log in
        run: |
          until curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"email":"admin@admin.com","password":"'"$SUPER_ADMIN_PASSWORD"'"}' \
            http://localhost:8080/auth/login | grep -q '"token"'
          do
            echo "Waiting for super admin to be ready..."
            sleep 2
          done
        env:
          SUPER_ADMIN_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}

      - name: üßπ Remove old JS test files
        run: rm -rf cypress/e2e/*.cy.js cypress/e2e/**/*.cy.js

      - name: üß™ Run E2E tests with Cypress
        run: npx cypress run
        env:
          CYPRESS_BASE_URL: http://localhost:5173
          CYPRESS_TEST_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
