name: Trip-Planner-CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      database:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: tripdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      backend:
        image: lrasata/trip-planner-backend-app:1.1.0-rc2
        ports:
          - 8080:8080
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/tripdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          ALLOWED_ORIGINS: http://localhost:5173
          COOKIE_SECURE_ATTRIBUTE: False
          COOKIE_SAME_SITE: Lax
          SUPER_ADMIN_FULLNAME: admin
          SUPER_ADMIN_EMAIL: admin@admin.com
          SUPER_ADMIN_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}
          ENVIRONMENT: production
          AWS_REGION: eu-central-1
          DYNAMODB_TABLE_NAME: staging-files-metadata
          S3_BUCKET_NAME: staging-trip-planner-app-media-uploads-bucket
          # No need to set AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY / AWS_SESSION_TOKEN manually
        options: >-
          --health-cmd "curl -f http://localhost:8080/actuator/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Configure AWS credentials (OIDC)
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::387836084035:role/githubTripWebPlannerApp
          aws-region: eu-central-1
          output-env-credentials: true # Exports temporary AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY / AWS_SESSION_TOKEN automatically

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üßê Type check
        run: npm run type-check

      - name: üõ† Build
        run: npm run build

      - name: ‚ñ∂ Start frontend in background
        run: npm run dev &
        env:
          NODE_ENV: development
          VITE_API_URL: http://localhost:8080
          VITE_API_CITIES_GEO_DB_URL: https://glggj50z83.execute-api.eu-central-1.amazonaws.com/prod/locations

      - name: ‚è± Wait until frontend is ready
        run: npx wait-on http://localhost:5173

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health; then
              echo "Backend is ready!"
              break
            fi
            echo "Backend not ready yet... attempt $i"
            sleep 2
          done

      - name: Check DB connectivity
        run: nc -zv database 5432 || echo "DB not reachable"

      - name: Check and wait until super admin can log in
        run: |
          count=0
          max_attempts=7
          until RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"email":"admin@admin.com","password":"'"$SUPER_ADMIN_PASSWORD"'"}' \
            http://localhost:8080/auth/login) && echo "$RESPONSE" | grep -q '"token"'; do
            count=$((count + 1))
            echo "Attempt $count/$max_attempts failed. Response:"
            echo "$RESPONSE"
            if [ $count -ge $max_attempts ]; then
              echo "Super admin login failed after $max_attempts attempts, aborting."
              exit 1
            fi
            echo "Waiting 2s before retrying..."
            sleep 2
          done
          echo "Super admin login succeeded."
        env:
          SUPER_ADMIN_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}

      - name: üßπ Remove old JS test files
        run: rm -rf cypress/e2e/*.cy.js cypress/e2e/**/*.cy.js

      - name: üß™ Run E2E tests with Cypress
        run: npx cypress run
        env:
          CYPRESS_BASE_URL: http://localhost:5173
          CYPRESS_TEST_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
